@model IEnumerable<SQLEscola.Models.QuestaoModel>

@{
    ViewBag.Title = "Questões";
}

<h2>Questões</h2>
<h3>Turma: @ViewBag.Turma / Professor: @ViewBag.Professor / Atividade: @ViewBag.Atividade</h3>


@using GridMvc.Html
@using GridMvc.Sorting

<p>
    @Html.ActionLink("Criar Nova Questão", "Create", new { id = ViewBag.IdAtividade })
</p>

<script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>

<div class="box-content">
    @helper CustomRenderingOfColumn(SQLEscola.Models.QuestaoModel questao)
    {
        if (questao.Status == "C")
        {
            @Html.Label("Criada");
        }
        else
        {
            @Html.Label("Questão Válida");
        }
    }
    @helper CustomRenderingOfColumnValidar(SQLEscola.Models.QuestaoModel questao)
    {
        if (questao.Status == "C")
        {
            @Html.ActionLink("Validar", "Validar", new { id = questao.Id_Questao }, new { @class = "modal-link" })
        }
    }
    @Html.Grid(Model).Columns(columns =>
    {

    columns.Add(quest => quest.Ordem)
            .Titled("Ordem")
            .SetWidth(100)
            .Encoded(false)
            .Sanitized(false);

    columns.Add(quest => quest.Descricao)
            .Titled("Descrição da Questão")
            .ThenSortByDescending(quest => quest.Descricao)
            .SetWidth(400)
            .Filterable(true);

    columns.Add()
                .Titled("Status")
                .Encoded(false)
                .Sanitized(false)
                .SetWidth(150)
                .Filterable(true)
                .RenderValueAs(questao => CustomRenderingOfColumn(questao));

    /* Adding not mapped column, that renders body, using inline Razor html helper */
    columns.Add()
            .Titled("Respostas dos Alunos")
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(ativ => Html.ActionLink("Respostas", "ListaRespostas", "Resposta", new { id = ativ.Id_Questao }, new { @class = "modal-link" }));

    columns.Add()
            .Titled("Visualizar")
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(ativ => Html.ActionLink("Visualizar", "Details", new { id = ativ.Id_Questao }, new { @class = "modal-link" }));

    columns.Add()
        .Titled("Validar Questão")
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(questao => CustomRenderingOfColumnValidar(questao));

    columns.Add()
            .Titled("Editar")
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(ativ => Html.ActionLink("Editar", "Edit", new { id = ativ.Id_Questao }, new { @class = "modal-link" }));

    columns.Add()
            .Titled("Remover")
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(ativ => Html.ActionLink("Remover", "Delete", new { id = ativ.Id_Questao }, new { @class = "modal-link" }));


}).WithPaging(5).Sortable()
</div>
<br />
<div>
    @Html.ActionLink("Retornar para Atividades", "Index", "Atividade", new { id = @ViewBag.IdTurma }, new { @class = "modal-link" })
</div>